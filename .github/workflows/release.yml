# This workflow will build the project and create a release on demand
# Uses:
#   OS: ubuntu-latest
#   Go: go 1.x

name: 🚀 Release Builder

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

# Add permissions to allow pushing tags and packages
permissions:
  contents: write
  packages: write

env:
  GOFLAGS: "-mod=readonly"

jobs:
  release:
    name: 📦 Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tagging

      - name: ✅ Validate Release Version
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?(-[0-9a-zA-Z.-]+)?(\+[0-9a-zA-Z.-]+)?$ ]]; then
            echo "❌ Error: Version '${{ github.event.inputs.version }}' does not follow format vX.Y[.Z][-PRERELEASE][+BUILD]"
            echo "❌ Version must start with 'v'"
            exit 1
          fi
          echo "✅ Version '${{ github.event.inputs.version }}' is valid"
          
          # Store original version with v prefix in environment variable
          VERSION="${{ github.event.inputs.version }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Note: Sample app version setting moved to platform-specific jobs

      - name: 🏷️ Update Product Version
        run: |
          # Store version with v prefix in version.txt
          VERSION="${{ env.VERSION }}"
          echo "$VERSION" > version.txt

      - name: 📝 Generate Changelog (Release Drafter)
        id: changelog
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚙️ Set up Go Environment
        uses: ./.github/actions/setup-go

      - name: 🗄️ Cache Go Modules
        uses: actions/cache@v4
        id: cache-go-modules
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-modules-

      - name: 📦 Install Dependencies
        run: |
          cd backend
          go mod download
          cd ../tests/integration
          go mod download

      - name: 🛠️ Build and Run Tests
        run: |
            set -e
            make all OS=$(go env GOOS) ARCH=$(go env GOARCH)

      - name: 🧹 Clean Previous Builds
        run: make clean_all

      - name: 🔨 Build Thunder Release Artifacts
        run: |
          # Define platform matrix as arrays
          PLATFORMS=(
            "windows:amd64"
            "linux:amd64"
            "linux:arm64"
            "darwin:amd64"
            "darwin:arm64"
          )
          
          echo "🏗️ Building Thunder for ${#PLATFORMS[@]} platforms..."
          
          # Loop through the platform matrix
          for platform in "${PLATFORMS[@]}"; do
            # Split the platform string into OS and ARCH
            OS="${platform%%:*}"
            ARCH="${platform#*:}"
            
            echo "🔨 Building Thunder backend for $OS/$ARCH..."
            make build_backend OS=$OS ARCH=$ARCH
            
            # Optional: Add a small delay to prevent resource contention
            sleep 1
          done
          
          echo "✅ Thunder built for all platforms successfully!"

      # Note: Node.js setup and sample app version updates moved to platform-specific jobs

      # Note: Sample app packaging moved to platform-specific jobs below

      - name: 📝 Read Updated Version
        id: version
        run: echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: 📦 Upload Backend Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thunder-distribution
          path: target/dist/*.zip
          if-no-files-found: error

      - name: 📦 Upload Shared Certificates
        uses: actions/upload-artifact@v4
        with:
          name: thunder-certificates
          path: target/out/.cert/*
          if-no-files-found: error

      - name: 🏷️ Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          TAG_VERSION="${{ env.VERSION }}"
          if [[ ! $TAG_VERSION == v* ]]; then
            TAG_VERSION="v$TAG_VERSION"
          fi

          git tag -a "$TAG_VERSION" -m "Release $TAG_VERSION"
          git push origin "$TAG_VERSION"

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐳 Build and Push Multi-Arch Docker Image
        run: |
          # Convert repository name to lowercase for GHCR
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME="ghcr.io/${REPO_NAME}"
          
          # Get version without 'v' prefix for Docker tags
          DOCKER_VERSION="${{ env.VERSION }}"
          if [[ $DOCKER_VERSION == v* ]]; then
            DOCKER_VERSION="${DOCKER_VERSION#v}"
          fi
          
          echo "🐳 Building and pushing Docker image: ${IMAGE_NAME}:${DOCKER_VERSION}"
          
          # Build and push multi-arch image with version and latest tags
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag "${IMAGE_NAME}:${DOCKER_VERSION}" \
            --tag "${IMAGE_NAME}:latest" \
            --push \
            .
          
          echo "✅ Docker image pushed successfully!"
          echo "📦 Image available at: ${IMAGE_NAME}:${DOCKER_VERSION}"
          echo "📦 Image available at: ${IMAGE_NAME}:latest"

      # Note: GitHub release creation moved to finalize-release job

      - name: 📝 Calculate Next Version
        id: next_version
        run: |
          # Get the current release version and remove 'v' prefix
          RELEASE_VERSION="${{ github.event.inputs.version }}"
          if [[ $RELEASE_VERSION == v* ]]; then
            RELEASE_VERSION="${RELEASE_VERSION#v}"
          fi
          
          # Parse version components (handle both X.Y and X.Y.Z formats)
          if [[ $RELEASE_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            # X.Y.Z format
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          elif [[ $RELEASE_VERSION =~ ^([0-9]+)\.([0-9]+) ]]; then
            # X.Y format
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="0"
          else
            echo "❌ Error: Unable to parse version format: $RELEASE_VERSION"
            exit 1
          fi
          
          # Bump minor version
          NEXT_MINOR=$((MINOR + 1))
          NEXT_VERSION="${MAJOR}.${NEXT_MINOR}.0"
          
          echo "✅ Next development version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: 🏷️ Update Product Version
        run: |
          NEXT_VERSION="v${{ steps.next_version.outputs.next_version }}"
          echo "$NEXT_VERSION" > version.txt
          echo "✅ Updated version.txt to $NEXT_VERSION"

      - name: ⚙️ Set up Node.js for Version Update
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          package-manager: 'npm'
          dependency-path: 'samples/apps/oauth'

      - name: 🏷️ Update Sample Apps Version
        run: |
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
          echo "📝 Setting sample apps version to $NEXT_VERSION"
          
          # Update the main sample app package.json
          cd samples/apps/oauth
          npm version $NEXT_VERSION --no-git-tag-version --allow-same-version
          
          # Update the server package.json
          cd server
          npm version $NEXT_VERSION --no-git-tag-version --allow-same-version
          
          cd ../../../..
          echo "✅ Updated sample apps version to $NEXT_VERSION"

      - name: 📈 Commit and Push Version Update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          NEXT_VERSION="${{ steps.next_version.outputs.next_version }}"
          
          # Add and commit the version changes
          git add version.txt samples/apps/oauth/package.json samples/apps/oauth/server/package.json

          if ! git diff --cached --quiet; then
              git commit -m "[Release] Update version to ${NEXT_VERSION} for the next development iteration"
              git push origin HEAD:main
              echo "✅ Pushed version update to main branch"
          else
            echo "✅ No changes to commit"
          fi

  # Platform-specific sample app packaging jobs
  package-samples-linux:
    name: 📦 Package Linux & Windows Samples
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Set up Go Environment
        uses: ./.github/actions/setup-go

      - name: ⚙️ Set up Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          package-manager: 'npm'
          dependency-path: 'samples/apps/oauth'

      - name: 📥 Download Shared Certificates
        uses: actions/download-artifact@v4
        with:
          name: thunder-certificates
          path: target/out/.cert/

      - name: 🏷️ Set Sample Apps Version
        run: |
          # Get the product version from the previous job
          SAMPLE_VERSION="${{ github.event.inputs.version }}"
          
          # Remove 'v' prefix if present
          if [[ $SAMPLE_VERSION == v* ]]; then
            SAMPLE_VERSION="${SAMPLE_VERSION#v}"
          fi
          
          echo "✅ Sample version set to '$SAMPLE_VERSION'"
          echo "SAMPLE_VERSION=$SAMPLE_VERSION" >> $GITHUB_ENV

      - name: 📝 Update Sample Apps Version
        run: |
          # Get the clean sample version without v prefix
          SAMPLE_VERSION="${{ env.SAMPLE_VERSION }}"
          echo "📝 Setting sample apps version to $SAMPLE_VERSION"
          
          # Update the main sample app package.json
          cd samples/apps/oauth
          npm version $SAMPLE_VERSION --no-git-tag-version --allow-same-version
          
          # Update the server package.json
          cd server
          npm version $SAMPLE_VERSION --no-git-tag-version --allow-same-version
          
          cd ../../../..
          echo "✅ Updated sample apps version to $SAMPLE_VERSION"

      - name: 🔨 Build Sample Apps (Once)
        run: |
          echo "🔨 Building sample apps (shared for all platforms)..."
          make build_samples

      - name: 📦 Package Linux Samples
        run: |
          echo "📦 Packaging Linux samples..."
          make package_samples OS=linux ARCH=x64
          make package_samples OS=linux ARCH=arm64

      - name: 📦 Package Windows Samples
        run: |
          echo "📦 Packaging Windows samples..."
          make package_samples OS=win ARCH=x64

      - name: 📦 Upload Linux & Windows Sample Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thunder-samples-linux-windows
          path: target/dist/*.zip
          if-no-files-found: error

  package-samples-macos:
    name: 📦 Package macOS Samples
    runs-on: macos-latest
    needs: release
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ Set up Go Environment
        uses: ./.github/actions/setup-go

      - name: ⚙️ Set up Node.js Environment
        uses: ./.github/actions/setup-node
        with:
          node-version: '20'
          package-manager: 'npm'
          dependency-path: 'samples/apps/oauth'

      - name: 📥 Download Shared Certificates
        uses: actions/download-artifact@v4
        with:
          name: thunder-certificates
          path: target/out/.cert/

      - name: 🏷️ Set Sample Apps Version
        run: |
          # Get the product version from the previous job
          SAMPLE_VERSION="${{ github.event.inputs.version }}"
          
          # Remove 'v' prefix if present
          if [[ $SAMPLE_VERSION == v* ]]; then
            SAMPLE_VERSION="${SAMPLE_VERSION#v}"
          fi
          
          echo "✅ Sample version set to '$SAMPLE_VERSION'"
          echo "SAMPLE_VERSION=$SAMPLE_VERSION" >> $GITHUB_ENV

      - name: 📝 Update Sample Apps Version
        run: |
          # Get the clean sample version without v prefix
          SAMPLE_VERSION="${{ env.SAMPLE_VERSION }}"
          echo "📝 Setting sample apps version to $SAMPLE_VERSION"
          
          # Update the main sample app package.json
          cd samples/apps/oauth
          npm version $SAMPLE_VERSION --no-git-tag-version --allow-same-version
          
          # Update the server package.json
          cd server
          npm version $SAMPLE_VERSION --no-git-tag-version --allow-same-version
          
          cd ../../../..
          echo "✅ Updated sample apps version to $SAMPLE_VERSION"

      - name: 🔨 Build and Package macOS Samples
        run: |
          make build_samples
          
          # Package for both x64 and arm64
          make package_samples OS=macos ARCH=x64
          make package_samples OS=macos ARCH=arm64

      - name: 📦 Upload macOS Sample Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thunder-samples-macos
          path: target/dist/*.zip
          if-no-files-found: error

  # Combined job to collect all artifacts and create release
  finalize-release:
    name: 🎯 Finalize Release
    runs-on: ubuntu-latest
    needs: [release, package-samples-linux, package-samples-macos]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download Backend Artifacts
        uses: actions/download-artifact@v4
        with:
          name: thunder-distribution
          path: ./backend-artifacts

      - name: 📥 Download Linux & Windows Sample Artifacts
        uses: actions/download-artifact@v4
        with:
          name: thunder-samples-linux-windows
          path: ./linux-windows-artifacts

      - name: 📥 Download macOS Sample Artifacts
        uses: actions/download-artifact@v4
        with:
          name: thunder-samples-macos
          path: ./macos-artifacts

      - name: 📦 Combine All Distribution Artifacts
        run: |
          mkdir -p target/dist
          
          # Copy backend artifacts
          cp ./backend-artifacts/*.zip target/dist/ || true
          
          # Copy sample artifacts from each platform
          cp ./linux-windows-artifacts/*.zip target/dist/ || true
          cp ./macos-artifacts/*.zip target/dist/ || true
          
          echo "✅ Combined all artifacts:"
          ls -la target/dist/

      - name: 📦 Upload Final Combined Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thunder-final-distribution
          path: target/dist/*.zip
          if-no-files-found: error

      - name: 📝 Read Version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Extract README Content for Release
        id: readme_extract
        run: |
          # Extract introduction (everything before first --- divider)
          INTRO=$(awk 'BEGIN{flag=1} /^---$/{flag=0; exit} flag{print}' README.md)
          
          # Extract Features section
          FEATURES=$(sed -n '/^## 🚀 Features/,/^---$/p' README.md | head -n -1)
          
          # Extract Quick Start section
          QUICKSTART=$(sed -n '/^## ⚡ Quickstart/,/^---$/p' README.md | head -n -1)
          
          # Extract license section including header
          LICENSE=$(grep -A 5 "^## License" README.md)

          # Combine for release description
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$INTRO" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$FEATURES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$QUICKSTART" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$LICENSE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: 📦 Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Thunder ${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: target/dist/*.zip
          body: ${{ env.RELEASE_BODY }}
          generate_release_notes: false

      - name: 🔔 Set Release Info
        id: release_info
        run: |
          RELEASE_VERSION="${{ steps.version.outputs.version }}"
          echo "release_name=Thunder ${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "release_tag=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "release_url=https://github.com/${{ github.repository }}/releases/tag/${RELEASE_VERSION}" >> $GITHUB_OUTPUT
      
      - name: 🔔 Send Release Notification
        uses: ./.github/actions/release-notification
        with:
          webhook: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          release-name: ${{ steps.release_info.outputs.release_name }}
          release-tag: ${{ steps.release_info.outputs.release_tag }}
          release-url: ${{ steps.release_info.outputs.release_url }}
