// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cache

import (
	"sync"

	mock "github.com/stretchr/testify/mock"
)

// NewCacheManagerInterfaceMock creates a new instance of CacheManagerInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheManagerInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheManagerInterfaceMock {
	mock := &CacheManagerInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CacheManagerInterfaceMock is an autogenerated mock type for the CacheManagerInterface type
type CacheManagerInterfaceMock struct {
	mock.Mock
}

type CacheManagerInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CacheManagerInterfaceMock) EXPECT() *CacheManagerInterfaceMock_Expecter {
	return &CacheManagerInterfaceMock_Expecter{mock: &_m.Mock}
}

// Init provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) Init() {
	_mock.Called()
	return
}

// CacheManagerInterfaceMock_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type CacheManagerInterfaceMock_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *CacheManagerInterfaceMock_Expecter) Init() *CacheManagerInterfaceMock_Init_Call {
	return &CacheManagerInterfaceMock_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *CacheManagerInterfaceMock_Init_Call) Run(run func()) *CacheManagerInterfaceMock_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_Init_Call) Return() *CacheManagerInterfaceMock_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheManagerInterfaceMock_Init_Call) RunAndReturn(run func()) *CacheManagerInterfaceMock_Init_Call {
	_c.Run(run)
	return _c
}

// IsEnabled provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) IsEnabled() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// CacheManagerInterfaceMock_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type CacheManagerInterfaceMock_IsEnabled_Call struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *CacheManagerInterfaceMock_Expecter) IsEnabled() *CacheManagerInterfaceMock_IsEnabled_Call {
	return &CacheManagerInterfaceMock_IsEnabled_Call{Call: _e.mock.On("IsEnabled")}
}

func (_c *CacheManagerInterfaceMock_IsEnabled_Call) Run(run func()) *CacheManagerInterfaceMock_IsEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_IsEnabled_Call) Return(b bool) *CacheManagerInterfaceMock_IsEnabled_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *CacheManagerInterfaceMock_IsEnabled_Call) RunAndReturn(run func() bool) *CacheManagerInterfaceMock_IsEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// addCache provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) addCache(cacheKey string, cacheInstance interface{}) {
	_mock.Called(cacheKey, cacheInstance)
	return
}

// CacheManagerInterfaceMock_addCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'addCache'
type CacheManagerInterfaceMock_addCache_Call struct {
	*mock.Call
}

// addCache is a helper method to define mock.On call
//   - cacheKey string
//   - cacheInstance interface{}
func (_e *CacheManagerInterfaceMock_Expecter) addCache(cacheKey interface{}, cacheInstance interface{}) *CacheManagerInterfaceMock_addCache_Call {
	return &CacheManagerInterfaceMock_addCache_Call{Call: _e.mock.On("addCache", cacheKey, cacheInstance)}
}

func (_c *CacheManagerInterfaceMock_addCache_Call) Run(run func(cacheKey string, cacheInstance interface{})) *CacheManagerInterfaceMock_addCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_addCache_Call) Return() *CacheManagerInterfaceMock_addCache_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheManagerInterfaceMock_addCache_Call) RunAndReturn(run func(cacheKey string, cacheInstance interface{})) *CacheManagerInterfaceMock_addCache_Call {
	_c.Run(run)
	return _c
}

// cleanupAllCaches provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) cleanupAllCaches() {
	_mock.Called()
	return
}

// CacheManagerInterfaceMock_cleanupAllCaches_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'cleanupAllCaches'
type CacheManagerInterfaceMock_cleanupAllCaches_Call struct {
	*mock.Call
}

// cleanupAllCaches is a helper method to define mock.On call
func (_e *CacheManagerInterfaceMock_Expecter) cleanupAllCaches() *CacheManagerInterfaceMock_cleanupAllCaches_Call {
	return &CacheManagerInterfaceMock_cleanupAllCaches_Call{Call: _e.mock.On("cleanupAllCaches")}
}

func (_c *CacheManagerInterfaceMock_cleanupAllCaches_Call) Run(run func()) *CacheManagerInterfaceMock_cleanupAllCaches_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_cleanupAllCaches_Call) Return() *CacheManagerInterfaceMock_cleanupAllCaches_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheManagerInterfaceMock_cleanupAllCaches_Call) RunAndReturn(run func()) *CacheManagerInterfaceMock_cleanupAllCaches_Call {
	_c.Run(run)
	return _c
}

// getCache provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) getCache(cacheKey string) (interface{}, bool) {
	ret := _mock.Called(cacheKey)

	if len(ret) == 0 {
		panic("no return value specified for getCache")
	}

	var r0 interface{}
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (interface{}, bool)); ok {
		return returnFunc(cacheKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = returnFunc(cacheKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(cacheKey)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// CacheManagerInterfaceMock_getCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getCache'
type CacheManagerInterfaceMock_getCache_Call struct {
	*mock.Call
}

// getCache is a helper method to define mock.On call
//   - cacheKey string
func (_e *CacheManagerInterfaceMock_Expecter) getCache(cacheKey interface{}) *CacheManagerInterfaceMock_getCache_Call {
	return &CacheManagerInterfaceMock_getCache_Call{Call: _e.mock.On("getCache", cacheKey)}
}

func (_c *CacheManagerInterfaceMock_getCache_Call) Run(run func(cacheKey string)) *CacheManagerInterfaceMock_getCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_getCache_Call) Return(ifaceVal interface{}, b bool) *CacheManagerInterfaceMock_getCache_Call {
	_c.Call.Return(ifaceVal, b)
	return _c
}

func (_c *CacheManagerInterfaceMock_getCache_Call) RunAndReturn(run func(cacheKey string) (interface{}, bool)) *CacheManagerInterfaceMock_getCache_Call {
	_c.Call.Return(run)
	return _c
}

// getMutex provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) getMutex() *sync.RWMutex {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for getMutex")
	}

	var r0 *sync.RWMutex
	if returnFunc, ok := ret.Get(0).(func() *sync.RWMutex); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sync.RWMutex)
		}
	}
	return r0
}

// CacheManagerInterfaceMock_getMutex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getMutex'
type CacheManagerInterfaceMock_getMutex_Call struct {
	*mock.Call
}

// getMutex is a helper method to define mock.On call
func (_e *CacheManagerInterfaceMock_Expecter) getMutex() *CacheManagerInterfaceMock_getMutex_Call {
	return &CacheManagerInterfaceMock_getMutex_Call{Call: _e.mock.On("getMutex")}
}

func (_c *CacheManagerInterfaceMock_getMutex_Call) Run(run func()) *CacheManagerInterfaceMock_getMutex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_getMutex_Call) Return(rWMutex *sync.RWMutex) *CacheManagerInterfaceMock_getMutex_Call {
	_c.Call.Return(rWMutex)
	return _c
}

func (_c *CacheManagerInterfaceMock_getMutex_Call) RunAndReturn(run func() *sync.RWMutex) *CacheManagerInterfaceMock_getMutex_Call {
	_c.Call.Return(run)
	return _c
}

// reset provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) reset() {
	_mock.Called()
	return
}

// CacheManagerInterfaceMock_reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'reset'
type CacheManagerInterfaceMock_reset_Call struct {
	*mock.Call
}

// reset is a helper method to define mock.On call
func (_e *CacheManagerInterfaceMock_Expecter) reset() *CacheManagerInterfaceMock_reset_Call {
	return &CacheManagerInterfaceMock_reset_Call{Call: _e.mock.On("reset")}
}

func (_c *CacheManagerInterfaceMock_reset_Call) Run(run func()) *CacheManagerInterfaceMock_reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_reset_Call) Return() *CacheManagerInterfaceMock_reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheManagerInterfaceMock_reset_Call) RunAndReturn(run func()) *CacheManagerInterfaceMock_reset_Call {
	_c.Run(run)
	return _c
}

// startCleanupRoutine provides a mock function for the type CacheManagerInterfaceMock
func (_mock *CacheManagerInterfaceMock) startCleanupRoutine() {
	_mock.Called()
	return
}

// CacheManagerInterfaceMock_startCleanupRoutine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'startCleanupRoutine'
type CacheManagerInterfaceMock_startCleanupRoutine_Call struct {
	*mock.Call
}

// startCleanupRoutine is a helper method to define mock.On call
func (_e *CacheManagerInterfaceMock_Expecter) startCleanupRoutine() *CacheManagerInterfaceMock_startCleanupRoutine_Call {
	return &CacheManagerInterfaceMock_startCleanupRoutine_Call{Call: _e.mock.On("startCleanupRoutine")}
}

func (_c *CacheManagerInterfaceMock_startCleanupRoutine_Call) Run(run func()) *CacheManagerInterfaceMock_startCleanupRoutine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CacheManagerInterfaceMock_startCleanupRoutine_Call) Return() *CacheManagerInterfaceMock_startCleanupRoutine_Call {
	_c.Call.Return()
	return _c
}

func (_c *CacheManagerInterfaceMock_startCleanupRoutine_Call) RunAndReturn(run func()) *CacheManagerInterfaceMock_startCleanupRoutine_Call {
	_c.Run(run)
	return _c
}
